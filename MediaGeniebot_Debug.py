
import logging
import os
import requests
import aiohttp
import yt_dlp

from aiohttp import web
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

TOKEN = os.getenv("BOT_TOKEN")
OMDB_API_KEY = "73603e14"
RENDER_URL = os.getenv("RENDER_EXTERNAL_URL", "")

if not TOKEN:
    raise Exception("‚ùå BOT_TOKEN –Ω–µ –∑–∞–¥–∞–Ω!")

logging.basicConfig(level=logging.INFO)

def translate_to_en(text):
    try:
        response = requests.get(
            "https://translate.googleapis.com/translate_a/single",
            params={"client": "gtx", "sl": "auto", "tl": "en", "dt": "t", "q": text},
            timeout=5
        )
        return response.json()[0][0][0]
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–≤–æ–¥–∞: {e}")
        return text

def download_audio(query):
    output_dir = "downloads"
    os.makedirs(output_dir, exist_ok=True)
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(output_dir, '%(title)s.%(ext)s'),
        'quiet': True,
        'noplaylist': True,
        'postprocessors': [{
            'key': 'FFmpegExtractAudio',
            'preferredcodec': 'mp3',
            'preferredquality': '192',
        }],
    }
    try:
        with yt_dlp.YoutubeDL(ydl_opts) as ydl:
            info = ydl.extract_info(f"ytsearch1:{query}", download=True)['entries'][0]
            title = info['title']
            path = os.path.join(output_dir, f"{title}.mp3")
            return path if os.path.exists(path) else None
    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏: {e}")
        return None

async def music(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("üéµ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏:
/music –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    await update.message.reply_text("‚è≥ –ó–∞–≥—Ä—É–∂–∞—é –º—É–∑—ã–∫—É...")
    file_path = download_audio(query)
    if file_path:
        with open(file_path, "rb") as audio:
            await update.message.reply_audio(audio)
        os.remove(file_path)
    else:
        await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å.")

def get_movie_info(title):
    try:
        title_en = translate_to_en(title)
        res = requests.get("http://www.omdbapi.com/", params={
            "t": title_en, "apikey": OMDB_API_KEY, "plot": "short"
        })
        data = res.json()
        if data.get("Response") == "True":
            return (
                f"üé¨ *{data['Title']}* ({data['Year']})\n"
                f"‚≠ê IMDb: {data.get('imdbRating')}\n"
                f"üìñ {data.get('Plot')}\n"
                f"[IMDb](https://www.imdb.com/title/{data['imdbID']})",
                data.get("Poster")
            )
    except Exception as e:
        logging.error(f"OMDb –æ—à–∏–±–∫–∞: {e}")
    return None, None

async def movie(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("üé¨ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ñ–∏–ª—å–º–∞:
/movie –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    await update.message.reply_text("üîç –ò—â—É —Ñ–∏–ª—å–º...")
    info, poster = get_movie_info(query)
    if info:
        if poster and poster != "N/A":
            await update.message.reply_photo(poster, caption=info, parse_mode="Markdown")
        else:
            await update.message.reply_text(info, parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –§–∏–ª—å–º –Ω–µ –Ω–∞–π–¥–µ–Ω.")

async def get_anime_info(title):
    title_en = translate_to_en(title)
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(f"https://api.jikan.moe/v4/anime?q={title_en}&limit=1") as r:
                data = await r.json()
                if data["data"]:
                    anime = data["data"][0]
                    return (
                        f"üéå *{anime['title']}*\n"
                        f"‚≠ê {anime.get('score')}\n"
                        f"üìñ {anime.get('synopsis')}\n"
                        f"[MyAnimeList]({anime['url']})",
                        anime["images"]["jpg"]["image_url"]
                    )
    except Exception as e:
        logging.error(f"Jikan –æ—à–∏–±–∫–∞: {e}")
    return None, None

async def anime(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("üéå –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∞–Ω–∏–º–µ:
/anime –Ω–∞–∑–≤–∞–Ω–∏–µ")
        return
    await update.message.reply_text("üîç –ò—â—É –∞–Ω–∏–º–µ...")
    info, image = await get_anime_info(query)
    if info:
        if image:
            await update.message.reply_photo(photo=image, caption=info, parse_mode="Markdown")
        else:
            await update.message.reply_text(info, parse_mode="Markdown")
    else:
        await update.message.reply_text("‚ùå –ê–Ω–∏–º–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "üëã –Ø –º—É–ª—å—Ç–∏–º–µ–¥–∏–π–Ω—ã–π –±–æ—Ç:\n"
        "/music <–ø–µ—Å–Ω—è>\n/movie <—Ñ–∏–ª—å–º>\n/anime <–∞–Ω–∏–º–µ>",
        reply_markup=ReplyKeyboardMarkup([["üéµ –ú—É–∑—ã–∫–∞"]], resize_keyboard=True)
    )

async def handle_music_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéß –ù–∞–ø–∏—à–∏ /music <–Ω–∞–∑–≤–∞–Ω–∏–µ>")

async def telegram_webhook_handler(request):
    data = await request.json()
    update = Update.de_json(data, app.bot)
    await app.update_queue.put(update)
    logging.info("üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ")
    return web.Response()

async def on_startup(app_aiohttp):
    if not RENDER_URL:
        logging.error("‚ùå RENDER_EXTERNAL_URL –Ω–µ —É–∫–∞–∑–∞–Ω")
        return
    webhook_url = RENDER_URL + "/webhook"
    await app.bot.set_webhook(webhook_url)
    logging.info(f"‚úÖ Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {webhook_url}")

def main():
    global app
    app = ApplicationBuilder().token(TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("music", music))
    app.add_handler(CommandHandler("movie", movie))
    app.add_handler(CommandHandler("anime", anime))
    app.add_handler(MessageHandler(filters.Regex("üéµ –ú—É–∑—ã–∫–∞"), handle_music_button))

    aio = web.Application()
    aio.router.add_post("/webhook", telegram_webhook_handler)
    aio.on_startup.append(on_startup)

    port = int(os.environ.get("PORT", 10000))
    web.run_app(aio, host="0.0.0.0", port=port)

if __name__ == "__main__":
    main()
